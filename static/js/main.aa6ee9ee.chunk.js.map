{"version":3,"sources":["components/Header.jsx","components/RepoList.jsx","components/TreeView.jsx","components/HomePage.jsx","AppRouter.js","App.js","serviceWorker.js","index.js"],"names":["App","props","Group","align","Alignment","LEFT","Heading","Divider","to","className","icon","text","React","Component","RepoList","state","list","name","url","bordered","striped","this","map","repo","index","minimal","href","rightIcon","target","TreeView","handleNodeClick","nodeData","notePath","e","originallySelected","isSelected","shiftKey","forEachNode","nodes","n","setState","handleNodeCollapse","isExpanded","handleNodeExpand","callback","node","childNodes","id","hasCaret","label","content","position","Position","RIGHT","secondaryLabel","intent","Intent","PRIMARY","Classes","TREE_NODE_ICON","disabled","contents","onNodeClick","onNodeCollapse","onNodeExpand","ELEVATION_0","HomePage","onChange","newValue","file","Header","value","minEditorHeight","generateMarkdownPreview","source","AppRouter","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aa6ee9ee.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport React from 'react';\nimport {\n    Button,\n    Alignment,\n    Navbar,\n    NavbarDivider,\n    NavbarGroup,\n    NavbarHeading\n} from \"@blueprintjs/core\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    \n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar>\n            <Navbar.Group align={Alignment.LEFT}>\n                <Navbar.Heading>Doc Deploy</Navbar.Heading>\n                <Navbar.Divider />\n                <Link to=\"/\">\n                    <Button className=\"bp3-minimal\" icon=\"home\" text=\"Home\" />\n                </Link>\n            </Navbar.Group>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nexport default App;","import { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport {\n    Alignment,\n    Button,\n    ButtonGroup,\n    Classes,\n    Code,\n    Divider,\n    Drawer,\n    Label,\n    Position,\n    Switch,\n    Navbar,\n    NavbarDivider,\n    NavbarGroup,\n    NavbarHeading,\n    FormGroup,\n    AnchorButton,\n    HTMLTable,\n    Dialog,\n    UL,\n    H3,\n} from \"@blueprintjs/core\";\n\nexport default class RepoList extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            list: [\n                {\n                    name: \"doc-deploy\",\n                    url: \"https://github.com/JacFearsome/doc-deploy\"\n                },\n                {\n                    name: \"jrussell-md\",\n                    url: \"https://github.com/JacFearsome/jrussell-md\"\n                }\n            ]\n        }\n    }\n\n  render() {\n    return (\n        <div>\n            <HTMLTable className=\"repo-table\" bordered={true} striped={true}>\n                <thead>\n                    <th>Name</th>\n                    <th>Actions</th>\n                </thead>\n                <tbody>\n                {this.state.list.map((repo, index) => (\n                    <tr index={index}>\n                        <td>\n                        <AnchorButton\n                            minimal={true}\n                            href={repo.url}\n                            rightIcon=\"share\"\n                            target=\"_blank\"\n                            text={repo.name}\n                        /></td>\n                        <td>\n                            <ButtonGroup minimal={true}>\n                                <Button>Load</Button>\n                                <Button>Deploy</Button>\n                            </ButtonGroup>\n                        </td>\n                    </tr>\n                ))}\n                </tbody>\n            </HTMLTable>\n        </div>\n    );\n  }\n}\n","import { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport {\n    Alignment,\n    Button,\n    Classes,\n    Code,\n    Divider,\n    Tooltip,\n    Position,\n    Intent,\n    Navbar,\n    NavbarDivider,\n    NavbarGroup,\n    NavbarHeading,\n    Icon,\n    HTMLTable,\n    Dialog,\n    H3,\n    Tree,\n} from \"@blueprintjs/core\";\n\nexport default class TreeView extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            nodes: [\n                {\n                    id: 0,\n                    hasCaret: true,\n                    icon: \"folder-close\",\n                    label: \"Folder 0\",\n                },\n                {\n                    id: 1,\n                    icon: \"folder-close\",\n                    isExpanded: true,\n                    label: (\n                        <Tooltip content=\"I'm a folder <3\" position={Position.RIGHT}>\n                            Folder 1\n                        </Tooltip>\n                    ),\n                    childNodes: [\n                        {\n                            id: 2,\n                            icon: \"document\",\n                            label: \"Item 0\",\n                            secondaryLabel: (\n                                <Tooltip content=\"An eye!\">\n                                    <Icon icon=\"eye-open\" />\n                                </Tooltip>\n                            ),\n                        },\n                        {\n                            id: 3,\n                            icon: <Icon icon=\"tag\" intent={Intent.PRIMARY} className={Classes.TREE_NODE_ICON} />,\n                            label: \"Organic meditation gluten-free, sriracha VHS drinking vinegar beard man.\",\n                        },\n                        {\n                            id: 4,\n                            hasCaret: true,\n                            icon: \"folder-close\",\n                            label: (\n                                <Tooltip content=\"foo\" position={Position.RIGHT}>\n                                    Folder 2\n                                </Tooltip>\n                            ),\n                            childNodes: [\n                                { id: 5, label: \"No-Icon Item\" },\n                                { id: 6, icon: \"tag\", label: \"Item 1\" },\n                                {\n                                    id: 7,\n                                    hasCaret: true,\n                                    icon: \"folder-close\",\n                                    label: \"Folder 3\",\n                                    childNodes: [\n                                        { id: 8, icon: \"document\", label: \"Item 0\" },\n                                        { id: 9, icon: \"tag\", label: \"Item 1\" },\n                                    ],\n                                },\n                            ],\n                        },\n                    ],\n                },\n                {\n                    id: 2,\n                    hasCaret: true,\n                    icon: \"folder-close\",\n                    label: \"Super secret files\",\n                    disabled: true,\n                },\n            ]\n        }\n    }\n\n    handleNodeClick = (nodeData, notePath, e) => {\n        const originallySelected = nodeData.isSelected;\n        if (!e.shiftKey) {\n            this.forEachNode(this.state.nodes, n => (n.isSelected = false));\n        }\n        nodeData.isSelected = originallySelected == null ? true : !originallySelected;\n        this.setState(this.state);\n    }\n\n    handleNodeCollapse = (nodeData) => {\n        nodeData.isExpanded = false;\n        this.setState(this.state);\n    }\n\n    handleNodeExpand = (nodeData) => {\n        nodeData.isExpanded = true;\n        this.setState(this.state);\n    }\n\n    forEachNode = (nodes, callback) => {\n        if (nodes == null) {\n            return;\n        }\n\n        for (const node of nodes) {\n            callback(node);\n            this.forEachNode(node.childNodes, callback);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Tree\n                    contents={this.state.nodes}\n                    onNodeClick={this.handleNodeClick}\n                    onNodeCollapse={this.handleNodeCollapse}\n                    onNodeExpand={this.handleNodeExpand}\n                    className={Classes.ELEVATION_0}\n                />\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport ReactMarkdown from 'react-markdown';\nimport ReactMde from \"react-mde\";\nimport * as Showdown from \"showdown\";\nimport {\n    Alignment,\n    Button,\n    Classes,\n    Code,\n    Divider,\n    Drawer,\n    Label,\n    Position,\n    Switch,\n    Navbar,\n    NavbarDivider,\n    NavbarGroup,\n    NavbarHeading,\n    FormGroup,\n    InputGroup,\n    HTMLTable,\n    Dialog,\n    H3,\n} from \"@blueprintjs/core\";\nimport Header from \"./Header\";\nimport RepoList from \"./RepoList\";\nimport TreeView from \"./TreeView\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\nimport 'github-markdown-css/github-markdown.css';\n\nclass HomePage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            file: \"\",\n        }\n    }\n\n    componentDidMount() {\n    }\n\n    onChange = (newValue) => {\n        this.setState({ file: newValue });\n    }\n\n    render() {\n        return (\n        <div>\n            <Header />\n            <div className=\"sidenav\">\n                <div className=\"sidenav-1\">\n                    <RepoList />\n                </div>\n                <div className=\"sidenav-2\">\n                    <TreeView />\n                </div>\n            </div>\n            <div className=\"row\">\n                    <div className=\"column\">\n                        <ReactMde\n                            value={this.state.file}\n                            onChange={this.onChange}\n                            minEditorHeight=\"800px\"\n                            generateMarkdownPreview={false}\n                        />\n                    </div>\n                    <div className=\"column preview\">\n                        <ReactMarkdown className=\"markdown-body\" source={this.state.file} />\n                    </div>\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default HomePage;","import React from \"react\";\nimport HomePage from \"./components/HomePage\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nexport const AppRouter = () => {\n  return (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={HomePage} />\n      </div>\n    </Router>\n  );\n};\n","import React, { Component } from \"react\";\nimport { AppRouter } from \"./AppRouter\";\n\nclass App extends Component {\n  render() {\n    return <AppRouter />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}